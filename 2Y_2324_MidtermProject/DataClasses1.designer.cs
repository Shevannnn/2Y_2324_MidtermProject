#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _2Y_2324_MidtermProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Midterm")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAvail(Avail instance);
    partial void UpdateAvail(Avail instance);
    partial void DeleteAvail(Avail instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertPet(Pet instance);
    partial void UpdatePet(Pet instance);
    partial void DeletePet(Pet instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffRole(StaffRole instance);
    partial void UpdateStaffRole(StaffRole instance);
    partial void DeleteStaffRole(StaffRole instance);
    partial void InsertStaffStatus(StaffStatus instance);
    partial void UpdateStaffStatus(StaffStatus instance);
    partial void DeleteStaffStatus(StaffStatus instance);
    partial void InsertSupply(Supply instance);
    partial void UpdateSupply(Supply instance);
    partial void DeleteSupply(Supply instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::_2Y_2324_MidtermProject.Properties.Settings.Default.MidtermConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Avail> Avails
		{
			get
			{
				return this.GetTable<Avail>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Pet> Pets
		{
			get
			{
				return this.GetTable<Pet>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffRole> StaffRoles
		{
			get
			{
				return this.GetTable<StaffRole>();
			}
		}
		
		public System.Data.Linq.Table<StaffStatus> StaffStatus
		{
			get
			{
				return this.GetTable<StaffStatus>();
			}
		}
		
		public System.Data.Linq.Table<Supply> Supplies
		{
			get
			{
				return this.GetTable<Supply>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Avail")]
	public partial class Avail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Avail_ID;
		
		private string _Avail_Desc;
		
		private EntitySet<Pet> _Pets;
		
		private EntitySet<Supply> _Supplies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvail_IDChanging(string value);
    partial void OnAvail_IDChanged();
    partial void OnAvail_DescChanging(string value);
    partial void OnAvail_DescChanged();
    #endregion
		
		public Avail()
		{
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			this._Supplies = new EntitySet<Supply>(new Action<Supply>(this.attach_Supplies), new Action<Supply>(this.detach_Supplies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Avail_ID
		{
			get
			{
				return this._Avail_ID;
			}
			set
			{
				if ((this._Avail_ID != value))
				{
					this.OnAvail_IDChanging(value);
					this.SendPropertyChanging();
					this._Avail_ID = value;
					this.SendPropertyChanged("Avail_ID");
					this.OnAvail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Avail_Desc
		{
			get
			{
				return this._Avail_Desc;
			}
			set
			{
				if ((this._Avail_Desc != value))
				{
					this.OnAvail_DescChanging(value);
					this.SendPropertyChanging();
					this._Avail_Desc = value;
					this.SendPropertyChanged("Avail_Desc");
					this.OnAvail_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Avail_Pet", Storage="_Pets", ThisKey="Avail_ID", OtherKey="Avail_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Avail_Supply", Storage="_Supplies", ThisKey="Avail_ID", OtherKey="Avail_ID")]
		public EntitySet<Supply> Supplies
		{
			get
			{
				return this._Supplies;
			}
			set
			{
				this._Supplies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Avail = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Avail = null;
		}
		
		private void attach_Supplies(Supply entity)
		{
			this.SendPropertyChanging();
			entity.Avail = this;
		}
		
		private void detach_Supplies(Supply entity)
		{
			this.SendPropertyChanging();
			entity.Avail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Customer_ID;
		
		private string _Staff_ID;
		
		private string _Customer_Name;
		
		private int _Customer_Age;
		
		private string _Customer_Sex;
		
		private int _Customer_Number;
		
		private string _Customer_Email;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnCustomer_NameChanging(string value);
    partial void OnCustomer_NameChanged();
    partial void OnCustomer_AgeChanging(int value);
    partial void OnCustomer_AgeChanged();
    partial void OnCustomer_SexChanging(string value);
    partial void OnCustomer_SexChanged();
    partial void OnCustomer_NumberChanging(int value);
    partial void OnCustomer_NumberChanged();
    partial void OnCustomer_EmailChanging(string value);
    partial void OnCustomer_EmailChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Name
		{
			get
			{
				return this._Customer_Name;
			}
			set
			{
				if ((this._Customer_Name != value))
				{
					this.OnCustomer_NameChanging(value);
					this.SendPropertyChanging();
					this._Customer_Name = value;
					this.SendPropertyChanged("Customer_Name");
					this.OnCustomer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Age", DbType="Int NOT NULL")]
		public int Customer_Age
		{
			get
			{
				return this._Customer_Age;
			}
			set
			{
				if ((this._Customer_Age != value))
				{
					this.OnCustomer_AgeChanging(value);
					this.SendPropertyChanging();
					this._Customer_Age = value;
					this.SendPropertyChanged("Customer_Age");
					this.OnCustomer_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Sex", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Sex
		{
			get
			{
				return this._Customer_Sex;
			}
			set
			{
				if ((this._Customer_Sex != value))
				{
					this.OnCustomer_SexChanging(value);
					this.SendPropertyChanging();
					this._Customer_Sex = value;
					this.SendPropertyChanged("Customer_Sex");
					this.OnCustomer_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Number", DbType="Int NOT NULL")]
		public int Customer_Number
		{
			get
			{
				return this._Customer_Number;
			}
			set
			{
				if ((this._Customer_Number != value))
				{
					this.OnCustomer_NumberChanging(value);
					this.SendPropertyChanging();
					this._Customer_Number = value;
					this.SendPropertyChanged("Customer_Number");
					this.OnCustomer_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Email
		{
			get
			{
				return this._Customer_Email;
			}
			set
			{
				if ((this._Customer_Email != value))
				{
					this.OnCustomer_EmailChanging(value);
					this.SendPropertyChanging();
					this._Customer_Email = value;
					this.SendPropertyChanged("Customer_Email");
					this.OnCustomer_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Customer", Storage="_Staff", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Staff_ID = value.Staff_ID;
					}
					else
					{
						this._Staff_ID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Login_ID;
		
		private string _Login_Name;
		
		private string _Login_Pass;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogin_IDChanging(string value);
    partial void OnLogin_IDChanged();
    partial void OnLogin_NameChanging(string value);
    partial void OnLogin_NameChanged();
    partial void OnLogin_PassChanging(string value);
    partial void OnLogin_PassChanged();
    #endregion
		
		public Login()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Login_ID
		{
			get
			{
				return this._Login_ID;
			}
			set
			{
				if ((this._Login_ID != value))
				{
					this.OnLogin_IDChanging(value);
					this.SendPropertyChanging();
					this._Login_ID = value;
					this.SendPropertyChanged("Login_ID");
					this.OnLogin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login_Name
		{
			get
			{
				return this._Login_Name;
			}
			set
			{
				if ((this._Login_Name != value))
				{
					this.OnLogin_NameChanging(value);
					this.SendPropertyChanging();
					this._Login_Name = value;
					this.SendPropertyChanged("Login_Name");
					this.OnLogin_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_Pass", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login_Pass
		{
			get
			{
				return this._Login_Pass;
			}
			set
			{
				if ((this._Login_Pass != value))
				{
					this.OnLogin_PassChanging(value);
					this.SendPropertyChanging();
					this._Login_Pass = value;
					this.SendPropertyChanged("Login_Pass");
					this.OnLogin_PassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Log", Storage="_Logs", ThisKey="Login_ID", OtherKey="Login_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Staff", Storage="_Staffs", ThisKey="Login_ID", OtherKey="Login_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Log_ID;
		
		private string _Login_ID;
		
		private System.DateTime _Log_Date;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLog_IDChanging(string value);
    partial void OnLog_IDChanged();
    partial void OnLogin_IDChanging(string value);
    partial void OnLogin_IDChanged();
    partial void OnLog_DateChanging(System.DateTime value);
    partial void OnLog_DateChanged();
    #endregion
		
		public Log()
		{
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Log_ID
		{
			get
			{
				return this._Log_ID;
			}
			set
			{
				if ((this._Log_ID != value))
				{
					this.OnLog_IDChanging(value);
					this.SendPropertyChanging();
					this._Log_ID = value;
					this.SendPropertyChanged("Log_ID");
					this.OnLog_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Login_ID
		{
			get
			{
				return this._Login_ID;
			}
			set
			{
				if ((this._Login_ID != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogin_IDChanging(value);
					this.SendPropertyChanging();
					this._Login_ID = value;
					this.SendPropertyChanged("Login_ID");
					this.OnLogin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_Date", DbType="Date NOT NULL")]
		public System.DateTime Log_Date
		{
			get
			{
				return this._Log_Date;
			}
			set
			{
				if ((this._Log_Date != value))
				{
					this.OnLog_DateChanging(value);
					this.SendPropertyChanging();
					this._Log_Date = value;
					this.SendPropertyChanged("Log_Date");
					this.OnLog_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Log", Storage="_Login", ThisKey="Login_ID", OtherKey="Login_ID", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Login_ID = value.Login_ID;
					}
					else
					{
						this._Login_ID = default(string);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pets")]
	public partial class Pet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Pet_ID;
		
		private string _Avail_ID;
		
		private string _Pet_Name;
		
		private string _Pet_Type;
		
		private string _Pet_Breed;
		
		private int _Pet_Age;
		
		private string _Pet_DOB;
		
		private string _Pet_Gender;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Avail> _Avail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPet_IDChanging(string value);
    partial void OnPet_IDChanged();
    partial void OnAvail_IDChanging(string value);
    partial void OnAvail_IDChanged();
    partial void OnPet_NameChanging(string value);
    partial void OnPet_NameChanged();
    partial void OnPet_TypeChanging(string value);
    partial void OnPet_TypeChanged();
    partial void OnPet_BreedChanging(string value);
    partial void OnPet_BreedChanged();
    partial void OnPet_AgeChanging(int value);
    partial void OnPet_AgeChanged();
    partial void OnPet_DOBChanging(string value);
    partial void OnPet_DOBChanged();
    partial void OnPet_GenderChanging(string value);
    partial void OnPet_GenderChanged();
    #endregion
		
		public Pet()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Avail = default(EntityRef<Avail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Pet_ID
		{
			get
			{
				return this._Pet_ID;
			}
			set
			{
				if ((this._Pet_ID != value))
				{
					this.OnPet_IDChanging(value);
					this.SendPropertyChanging();
					this._Pet_ID = value;
					this.SendPropertyChanged("Pet_ID");
					this.OnPet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Avail_ID
		{
			get
			{
				return this._Avail_ID;
			}
			set
			{
				if ((this._Avail_ID != value))
				{
					if (this._Avail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvail_IDChanging(value);
					this.SendPropertyChanging();
					this._Avail_ID = value;
					this.SendPropertyChanged("Avail_ID");
					this.OnAvail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Name
		{
			get
			{
				return this._Pet_Name;
			}
			set
			{
				if ((this._Pet_Name != value))
				{
					this.OnPet_NameChanging(value);
					this.SendPropertyChanging();
					this._Pet_Name = value;
					this.SendPropertyChanged("Pet_Name");
					this.OnPet_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Type
		{
			get
			{
				return this._Pet_Type;
			}
			set
			{
				if ((this._Pet_Type != value))
				{
					this.OnPet_TypeChanging(value);
					this.SendPropertyChanging();
					this._Pet_Type = value;
					this.SendPropertyChanged("Pet_Type");
					this.OnPet_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Breed", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Breed
		{
			get
			{
				return this._Pet_Breed;
			}
			set
			{
				if ((this._Pet_Breed != value))
				{
					this.OnPet_BreedChanging(value);
					this.SendPropertyChanging();
					this._Pet_Breed = value;
					this.SendPropertyChanged("Pet_Breed");
					this.OnPet_BreedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Age", DbType="Int NOT NULL")]
		public int Pet_Age
		{
			get
			{
				return this._Pet_Age;
			}
			set
			{
				if ((this._Pet_Age != value))
				{
					this.OnPet_AgeChanging(value);
					this.SendPropertyChanging();
					this._Pet_Age = value;
					this.SendPropertyChanged("Pet_Age");
					this.OnPet_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_DOB", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_DOB
		{
			get
			{
				return this._Pet_DOB;
			}
			set
			{
				if ((this._Pet_DOB != value))
				{
					this.OnPet_DOBChanging(value);
					this.SendPropertyChanging();
					this._Pet_DOB = value;
					this.SendPropertyChanged("Pet_DOB");
					this.OnPet_DOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Pet_Gender
		{
			get
			{
				return this._Pet_Gender;
			}
			set
			{
				if ((this._Pet_Gender != value))
				{
					this.OnPet_GenderChanging(value);
					this.SendPropertyChanging();
					this._Pet_Gender = value;
					this.SendPropertyChanged("Pet_Gender");
					this.OnPet_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Order", Storage="_Orders", ThisKey="Pet_ID", OtherKey="Pet_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Avail_Pet", Storage="_Avail", ThisKey="Avail_ID", OtherKey="Avail_ID", IsForeignKey=true)]
		public Avail Avail
		{
			get
			{
				return this._Avail.Entity;
			}
			set
			{
				Avail previousValue = this._Avail.Entity;
				if (((previousValue != value) 
							|| (this._Avail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Avail.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Avail.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._Avail_ID = value.Avail_ID;
					}
					else
					{
						this._Avail_ID = default(string);
					}
					this.SendPropertyChanged("Avail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_ID;
		
		private string _StaffRole_ID;
		
		private string _StaffStatus_ID;
		
		private string _Login_ID;
		
		private string _StaffName;
		
		private int _Staff_Number;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Login> _Login;
		
		private EntityRef<StaffRole> _StaffRole;
		
		private EntityRef<StaffStatus> _StaffStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnStaffRole_IDChanging(string value);
    partial void OnStaffRole_IDChanged();
    partial void OnStaffStatus_IDChanging(string value);
    partial void OnStaffStatus_IDChanged();
    partial void OnLogin_IDChanging(string value);
    partial void OnLogin_IDChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnStaff_NumberChanging(int value);
    partial void OnStaff_NumberChanged();
    #endregion
		
		public Staff()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Login = default(EntityRef<Login>);
			this._StaffRole = default(EntityRef<StaffRole>);
			this._StaffStatus = default(EntityRef<StaffStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					if (this._StaffRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string StaffStatus_ID
		{
			get
			{
				return this._StaffStatus_ID;
			}
			set
			{
				if ((this._StaffStatus_ID != value))
				{
					if (this._StaffStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_ID = value;
					this.SendPropertyChanged("StaffStatus_ID");
					this.OnStaffStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Login_ID
		{
			get
			{
				return this._Login_ID;
			}
			set
			{
				if ((this._Login_ID != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogin_IDChanging(value);
					this.SendPropertyChanging();
					this._Login_ID = value;
					this.SendPropertyChanged("Login_ID");
					this.OnLogin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Number", DbType="Int NOT NULL")]
		public int Staff_Number
		{
			get
			{
				return this._Staff_Number;
			}
			set
			{
				if ((this._Staff_Number != value))
				{
					this.OnStaff_NumberChanging(value);
					this.SendPropertyChanging();
					this._Staff_Number = value;
					this.SendPropertyChanged("Staff_Number");
					this.OnStaff_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Customer", Storage="_Customers", ThisKey="Staff_ID", OtherKey="Staff_ID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Order", Storage="_Orders", ThisKey="Staff_ID", OtherKey="Staff_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Staff", Storage="_Login", ThisKey="Login_ID", OtherKey="Login_ID", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._Login_ID = value.Login_ID;
					}
					else
					{
						this._Login_ID = default(string);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_StaffRole", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID", IsForeignKey=true)]
		public StaffRole StaffRole
		{
			get
			{
				return this._StaffRole.Entity;
			}
			set
			{
				StaffRole previousValue = this._StaffRole.Entity;
				if (((previousValue != value) 
							|| (this._StaffRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffRole.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffRole.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffRole_ID = value.StaffRole_ID;
					}
					else
					{
						this._StaffRole_ID = default(string);
					}
					this.SendPropertyChanged("StaffRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_Staff", Storage="_StaffStatus", ThisKey="StaffStatus_ID", OtherKey="StaffStatus_ID", IsForeignKey=true)]
		public StaffStatus StaffStatus
		{
			get
			{
				return this._StaffStatus.Entity;
			}
			set
			{
				StaffStatus previousValue = this._StaffStatus.Entity;
				if (((previousValue != value) 
							|| (this._StaffStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffStatus.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffStatus.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffStatus_ID = value.StaffStatus_ID;
					}
					else
					{
						this._StaffStatus_ID = default(string);
					}
					this.SendPropertyChanged("StaffStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffRole")]
	public partial class StaffRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffRole_ID;
		
		private string _StaffRole_Desc;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffRole_IDChanging(string value);
    partial void OnStaffRole_IDChanged();
    partial void OnStaffRole_DescChanging(string value);
    partial void OnStaffRole_DescChanged();
    #endregion
		
		public StaffRole()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffRole_Desc
		{
			get
			{
				return this._StaffRole_Desc;
			}
			set
			{
				if ((this._StaffRole_Desc != value))
				{
					this.OnStaffRole_DescChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_Desc = value;
					this.SendPropertyChanged("StaffRole_Desc");
					this.OnStaffRole_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_Staffs", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffStatus")]
	public partial class StaffStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffStatus_ID;
		
		private string _StaffStatus_Desc;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffStatus_IDChanging(string value);
    partial void OnStaffStatus_IDChanged();
    partial void OnStaffStatus_DescChanging(string value);
    partial void OnStaffStatus_DescChanged();
    #endregion
		
		public StaffStatus()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffStatus_ID
		{
			get
			{
				return this._StaffStatus_ID;
			}
			set
			{
				if ((this._StaffStatus_ID != value))
				{
					this.OnStaffStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_ID = value;
					this.SendPropertyChanged("StaffStatus_ID");
					this.OnStaffStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffStatus_Desc
		{
			get
			{
				return this._StaffStatus_Desc;
			}
			set
			{
				if ((this._StaffStatus_Desc != value))
				{
					this.OnStaffStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_Desc = value;
					this.SendPropertyChanged("StaffStatus_Desc");
					this.OnStaffStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_Staff", Storage="_Staffs", ThisKey="StaffStatus_ID", OtherKey="StaffStatus_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplies")]
	public partial class Supply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Supply_ID;
		
		private string _Avail_ID;
		
		private string _Supply_Type;
		
		private string _Supply_Name;
		
		private int _Supply_Quantity;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Avail> _Avail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupply_IDChanging(string value);
    partial void OnSupply_IDChanged();
    partial void OnAvail_IDChanging(string value);
    partial void OnAvail_IDChanged();
    partial void OnSupply_TypeChanging(string value);
    partial void OnSupply_TypeChanged();
    partial void OnSupply_NameChanging(string value);
    partial void OnSupply_NameChanged();
    partial void OnSupply_QuantityChanging(int value);
    partial void OnSupply_QuantityChanged();
    #endregion
		
		public Supply()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Avail = default(EntityRef<Avail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supply_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Supply_ID
		{
			get
			{
				return this._Supply_ID;
			}
			set
			{
				if ((this._Supply_ID != value))
				{
					this.OnSupply_IDChanging(value);
					this.SendPropertyChanging();
					this._Supply_ID = value;
					this.SendPropertyChanged("Supply_ID");
					this.OnSupply_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Avail_ID
		{
			get
			{
				return this._Avail_ID;
			}
			set
			{
				if ((this._Avail_ID != value))
				{
					if (this._Avail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvail_IDChanging(value);
					this.SendPropertyChanging();
					this._Avail_ID = value;
					this.SendPropertyChanged("Avail_ID");
					this.OnAvail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supply_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Supply_Type
		{
			get
			{
				return this._Supply_Type;
			}
			set
			{
				if ((this._Supply_Type != value))
				{
					this.OnSupply_TypeChanging(value);
					this.SendPropertyChanging();
					this._Supply_Type = value;
					this.SendPropertyChanged("Supply_Type");
					this.OnSupply_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supply_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Supply_Name
		{
			get
			{
				return this._Supply_Name;
			}
			set
			{
				if ((this._Supply_Name != value))
				{
					this.OnSupply_NameChanging(value);
					this.SendPropertyChanging();
					this._Supply_Name = value;
					this.SendPropertyChanged("Supply_Name");
					this.OnSupply_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supply_Quantity", DbType="Int NOT NULL")]
		public int Supply_Quantity
		{
			get
			{
				return this._Supply_Quantity;
			}
			set
			{
				if ((this._Supply_Quantity != value))
				{
					this.OnSupply_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Supply_Quantity = value;
					this.SendPropertyChanged("Supply_Quantity");
					this.OnSupply_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supply_Order", Storage="_Orders", ThisKey="Supply_ID", OtherKey="Supply_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Avail_Supply", Storage="_Avail", ThisKey="Avail_ID", OtherKey="Avail_ID", IsForeignKey=true)]
		public Avail Avail
		{
			get
			{
				return this._Avail.Entity;
			}
			set
			{
				Avail previousValue = this._Avail.Entity;
				if (((previousValue != value) 
							|| (this._Avail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Avail.Entity = null;
						previousValue.Supplies.Remove(this);
					}
					this._Avail.Entity = value;
					if ((value != null))
					{
						value.Supplies.Add(this);
						this._Avail_ID = value.Avail_ID;
					}
					else
					{
						this._Avail_ID = default(string);
					}
					this.SendPropertyChanged("Avail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Supply = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Supply = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Order_ID;
		
		private string _Staff_ID;
		
		private string _Customer_ID;
		
		private string _Pet_ID;
		
		private string _Supply_ID;
		
		private string _Order_Date;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Pet> _Pet;
		
		private EntityRef<Supply> _Supply;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IDChanging(string value);
    partial void OnOrder_IDChanged();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnPet_IDChanging(string value);
    partial void OnPet_IDChanged();
    partial void OnSupply_IDChanging(string value);
    partial void OnSupply_IDChanged();
    partial void OnOrder_DateChanging(string value);
    partial void OnOrder_DateChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public Order()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Staff = default(EntityRef<Staff>);
			this._Pet = default(EntityRef<Pet>);
			this._Supply = default(EntityRef<Supply>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_ID", DbType="Char(10)")]
		public string Pet_ID
		{
			get
			{
				return this._Pet_ID;
			}
			set
			{
				if ((this._Pet_ID != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPet_IDChanging(value);
					this.SendPropertyChanging();
					this._Pet_ID = value;
					this.SendPropertyChanged("Pet_ID");
					this.OnPet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supply_ID", DbType="Char(10)")]
		public string Supply_ID
		{
			get
			{
				return this._Supply_ID;
			}
			set
			{
				if ((this._Supply_ID != value))
				{
					if (this._Supply.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupply_IDChanging(value);
					this.SendPropertyChanging();
					this._Supply_ID = value;
					this.SendPropertyChanged("Supply_ID");
					this.OnSupply_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Date", DbType="VarChar(50)")]
		public string Order_Date
		{
			get
			{
				return this._Order_Date;
			}
			set
			{
				if ((this._Order_Date != value))
				{
					this.OnOrder_DateChanging(value);
					this.SendPropertyChanging();
					this._Order_Date = value;
					this.SendPropertyChanged("Order_Date");
					this.OnOrder_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Order", Storage="_Staff", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Staff_ID = value.Staff_ID;
					}
					else
					{
						this._Staff_ID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Order", Storage="_Pet", ThisKey="Pet_ID", OtherKey="Pet_ID", IsForeignKey=true)]
		public Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Pet_ID = value.Pet_ID;
					}
					else
					{
						this._Pet_ID = default(string);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supply_Order", Storage="_Supply", ThisKey="Supply_ID", OtherKey="Supply_ID", IsForeignKey=true)]
		public Supply Supply
		{
			get
			{
				return this._Supply.Entity;
			}
			set
			{
				Supply previousValue = this._Supply.Entity;
				if (((previousValue != value) 
							|| (this._Supply.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supply.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Supply.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Supply_ID = value.Supply_ID;
					}
					else
					{
						this._Supply_ID = default(string);
					}
					this.SendPropertyChanged("Supply");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
